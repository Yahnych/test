var _moarwick$elm_webpack_starter$WritingAdvice_ops = _moarwick$elm_webpack_starter$WritingAdvice_ops || {};
_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _moarwick$elm_webpack_starter$WritingAdvice$formatStyleDecoder = function () {
	var decodeToFormatStyle = function (string) {
		var _p0 = string;
		switch (_p0) {
			case 'Normal':
				return _elm_lang$core$Result$Ok(_moarwick$elm_webpack_starter$Format$Normal);
			case 'Quotation':
				return _elm_lang$core$Result$Ok(_moarwick$elm_webpack_starter$Format$Quotation);
			case 'AuthorOfQuotation':
				return _elm_lang$core$Result$Ok(_moarwick$elm_webpack_starter$Format$AuthorOfQuotation);
			case 'Title':
				return _elm_lang$core$Result$Ok(_moarwick$elm_webpack_starter$Format$Title);
			default:
				return _elm_lang$core$Result$Err(
					A2(_elm_lang$core$Basics_ops['++'], 'Not a valid FormatStyle: ', string));
		}
	};
	return A2(_elm_lang$core$Json_Decode$customDecoder, _elm_lang$core$Json_Decode$string, decodeToFormatStyle);
}();
var _moarwick$elm_webpack_starter$WritingAdvice$questionsDecoder = A3(
	_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
	'format',
	_moarwick$elm_webpack_starter$WritingAdvice$formatStyleDecoder,
	A3(
		_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
		'maxlength',
		_elm_lang$core$Json_Decode$int,
		A3(
			_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
			'rows',
			_elm_lang$core$Json_Decode$int,
			A3(
				_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
				'paragraphId',
				_elm_lang$core$Json_Decode$int,
				A3(
					_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
					'id',
					_elm_lang$core$Json_Decode$int,
					A3(
						_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
						'editing',
						_elm_lang$core$Json_Decode$bool,
						A3(
							_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
							'completed',
							_elm_lang$core$Json_Decode$bool,
							A3(
								_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
								'answer',
								_elm_lang$core$Json_Decode$string,
								A3(
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$required,
									'question',
									_elm_lang$core$Json_Decode$string,
									_NoRedInk$elm_decode_pipeline$Json_Decode_Pipeline$decode(_moarwick$elm_webpack_starter$Questions$Question))))))))));
var _moarwick$elm_webpack_starter$WritingAdvice$questionsModelDecoder = A7(
	_elm_lang$core$Json_Decode$object6,
	_moarwick$elm_webpack_starter$Questions$Content,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'title', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'instructions', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'questions',
		_elm_lang$core$Json_Decode$list(_moarwick$elm_webpack_starter$WritingAdvice$questionsDecoder)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'numberOfParagraphs', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'percentageComplete', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'completionMessage', _elm_lang$core$Json_Decode$string));
var _moarwick$elm_webpack_starter$WritingAdvice$decodeQuestionsModel = function (questionsModelJson) {
	return A2(_elm_lang$core$Json_Decode$decodeValue, _moarwick$elm_webpack_starter$WritingAdvice$questionsModelDecoder, questionsModelJson);
};
var _moarwick$elm_webpack_starter$WritingAdvice$encodeFormatStyle = function (formatStyle) {
	var _p1 = formatStyle;
	switch (_p1.ctor) {
		case 'Normal':
			return _elm_lang$core$Json_Encode$string('Normal');
		case 'Quotation':
			return _elm_lang$core$Json_Encode$string('Quotation');
		case 'AuthorOfQuotation':
			return _elm_lang$core$Json_Encode$string('AuthorOfQuotation');
		default:
			return _elm_lang$core$Json_Encode$string('Title');
	}
};
var _moarwick$elm_webpack_starter$WritingAdvice$encodeQuestions = function (model) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'question',
				_1: _elm_lang$core$Json_Encode$string(model.question)
			},
				{
				ctor: '_Tuple2',
				_0: 'answer',
				_1: _elm_lang$core$Json_Encode$string(model.answer)
			},
				{
				ctor: '_Tuple2',
				_0: 'completed',
				_1: _elm_lang$core$Json_Encode$bool(model.completed)
			},
				{
				ctor: '_Tuple2',
				_0: 'editing',
				_1: _elm_lang$core$Json_Encode$bool(model.editing)
			},
				{
				ctor: '_Tuple2',
				_0: 'id',
				_1: _elm_lang$core$Json_Encode$int(model.id)
			},
				{
				ctor: '_Tuple2',
				_0: 'paragraphId',
				_1: _elm_lang$core$Json_Encode$int(model.paragraphId)
			},
				{
				ctor: '_Tuple2',
				_0: 'rows',
				_1: _elm_lang$core$Json_Encode$int(model.rows)
			},
				{
				ctor: '_Tuple2',
				_0: 'maxlength',
				_1: _elm_lang$core$Json_Encode$int(model.maxlength)
			},
				{
				ctor: '_Tuple2',
				_0: 'format',
				_1: _moarwick$elm_webpack_starter$WritingAdvice$encodeFormatStyle(model.format)
			}
			]));
};
var _moarwick$elm_webpack_starter$WritingAdvice$encodeQuestion = function (model) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'title',
				_1: _elm_lang$core$Json_Encode$string(model.title)
			},
				{
				ctor: '_Tuple2',
				_0: 'instructions',
				_1: _elm_lang$core$Json_Encode$string(model.instructions)
			},
				{
				ctor: '_Tuple2',
				_0: 'questions',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _moarwick$elm_webpack_starter$WritingAdvice$encodeQuestions, model.questions))
			},
				{
				ctor: '_Tuple2',
				_0: 'numberOfParagraphs',
				_1: _elm_lang$core$Json_Encode$int(model.numberOfParagraphs)
			},
				{
				ctor: '_Tuple2',
				_0: 'percentageComplete',
				_1: _elm_lang$core$Json_Encode$int(model.percentageComplete)
			},
				{
				ctor: '_Tuple2',
				_0: 'completionMessage',
				_1: _elm_lang$core$Json_Encode$string(model.completionMessage)
			}
			]));
};
var _moarwick$elm_webpack_starter$WritingAdvice$encodeJson = function (model) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'questions',
				_1: _moarwick$elm_webpack_starter$WritingAdvice$encodeQuestion(model.questions.content)
			}
			]));
};
var _moarwick$elm_webpack_starter$WritingAdvice$save = _elm_lang$core$Native_Platform.outgoingPort(
	'save',
	function (v) {
		return v;
	});
var _moarwick$elm_webpack_starter$WritingAdvice$sendToStorage = function (model) {
	return _moarwick$elm_webpack_starter$WritingAdvice$save(
		_moarwick$elm_webpack_starter$WritingAdvice$encodeQuestion(model));
};
var _moarwick$elm_webpack_starter$WritingAdvice$checkIeVersion = _elm_lang$core$Native_Platform.outgoingPort(
	'checkIeVersion',
	function (v) {
		return v;
	});
var _moarwick$elm_webpack_starter$WritingAdvice$init = function () {
	var questions$ = _moarwick$elm_webpack_starter$Questions$init;
	var model$ = {
		questions: questions$,
		essay: A2(_moarwick$elm_webpack_starter$Essay$init, questions$.content, ''),
		header: _moarwick$elm_webpack_starter$Header$init,
		ieVersionNumber: 0
	};
	return A2(
		_elm_lang$core$Platform_Cmd_ops['!'],
		model$,
		_elm_lang$core$Native_List.fromArray(
			[
				_moarwick$elm_webpack_starter$WritingAdvice$checkIeVersion(model$.ieVersionNumber)
			]));
}();
var _moarwick$elm_webpack_starter$WritingAdvice$load = _elm_lang$core$Native_Platform.incomingPort('load', _elm_lang$core$Json_Decode$value);
var _moarwick$elm_webpack_starter$WritingAdvice$ieVersion = _elm_lang$core$Native_Platform.incomingPort('ieVersion', _elm_lang$core$Json_Decode$int);
var _moarwick$elm_webpack_starter$WritingAdvice$Model = F4(
	function (a, b, c, d) {
		return {questions: a, essay: b, header: c, ieVersionNumber: d};
	});
var _moarwick$elm_webpack_starter$WritingAdvice$NoOp = {ctor: 'NoOp'};
var _moarwick$elm_webpack_starter$WritingAdvice$CheckIE = function (a) {
	return {ctor: 'CheckIE', _0: a};
};
var _moarwick$elm_webpack_starter$WritingAdvice$SetQuestions = function (a) {
	return {ctor: 'SetQuestions', _0: a};
};
var _moarwick$elm_webpack_starter$WritingAdvice$loadFromStorage = function (questionsModelJson) {
	var _p2 = _moarwick$elm_webpack_starter$WritingAdvice$decodeQuestionsModel(questionsModelJson);
	if (_p2.ctor === 'Ok') {
		return _moarwick$elm_webpack_starter$WritingAdvice$SetQuestions(_p2._0);
	} else {
		return _moarwick$elm_webpack_starter$WritingAdvice$NoOp;
	}
};
var _moarwick$elm_webpack_starter$WritingAdvice$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_moarwick$elm_webpack_starter$WritingAdvice$ieVersion(_moarwick$elm_webpack_starter$WritingAdvice$CheckIE),
				_moarwick$elm_webpack_starter$WritingAdvice$load(_moarwick$elm_webpack_starter$WritingAdvice$loadFromStorage)
			]));
};
var _moarwick$elm_webpack_starter$WritingAdvice$UpdateMarkdown = {ctor: 'UpdateMarkdown'};
var _moarwick$elm_webpack_starter$WritingAdvice$UpdateHtmlEssay = function (a) {
	return {ctor: 'UpdateHtmlEssay', _0: a};
};
var _moarwick$elm_webpack_starter$WritingAdvice$UpdateHeader = function (a) {
	return {ctor: 'UpdateHeader', _0: a};
};
var _moarwick$elm_webpack_starter$WritingAdvice$UpdateQuestions = function (a) {
	return {ctor: 'UpdateQuestions', _0: a};
};
var _moarwick$elm_webpack_starter$WritingAdvice$update = F2(
	function (message, model) {
		update:
		while (true) {
			var _p3 = message;
			switch (_p3.ctor) {
				case 'CheckIE':
					var _p4 = _p3._0;
					var essay = model.essay;
					var essay$ = _elm_lang$core$Native_Utils.update(
						essay,
						{ieVersionNumber: _p4});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{ieVersionNumber: _p4, essay: essay$}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				case 'UpdateQuestions':
					var _p5 = A2(_moarwick$elm_webpack_starter$Questions$update, _p3._0, model.questions);
					var questions$ = _p5._0;
					var questionsFx = _p5._1;
					var model$ = _elm_lang$core$Native_Utils.update(
						model,
						{questions: questions$});
					var _p6 = A2(_moarwick$elm_webpack_starter$WritingAdvice$update, _moarwick$elm_webpack_starter$WritingAdvice$UpdateMarkdown, model$);
					var model$$ = _p6._0;
					var fx$$ = _p6._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model$$,
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_elm_lang$core$Platform_Cmd$map, _moarwick$elm_webpack_starter$WritingAdvice$UpdateQuestions, questionsFx),
								fx$$
							]));
				case 'UpdateMarkdown':
					var _p7 = A2(
						_moarwick$elm_webpack_starter$Essay$update,
						_moarwick$elm_webpack_starter$Essay$UpdateMarkdown(model.questions.content),
						model.essay);
					var essay$ = _p7._0;
					var essayFx = _p7._1;
					var model$ = _elm_lang$core$Native_Utils.update(
						model,
						{essay: essay$});
					var _v4 = _moarwick$elm_webpack_starter$WritingAdvice$UpdateHtmlEssay(
						_moarwick$elm_webpack_starter$Essay$UpdateEssay(model$.questions.content)),
						_v5 = model$;
					message = _v4;
					model = _v5;
					continue update;
				case 'UpdateHtmlEssay':
					var _p8 = A2(_moarwick$elm_webpack_starter$Essay$update, _p3._0, model.essay);
					var essay$ = _p8._0;
					var essayFx = _p8._1;
					var model$ = _elm_lang$core$Native_Utils.update(
						model,
						{essay: essay$});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model$,
						_elm_lang$core$Native_List.fromArray(
							[
								_moarwick$elm_webpack_starter$WritingAdvice$sendToStorage(model$.questions.content),
								A2(_elm_lang$core$Platform_Cmd$map, _moarwick$elm_webpack_starter$WritingAdvice$UpdateHtmlEssay, essayFx)
							]));
				case 'UpdateHeader':
					var _p9 = A2(_moarwick$elm_webpack_starter$Header$update, _p3._0, model.header);
					var header$ = _p9._0;
					var fx = _p9._1;
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{header: header$}),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_elm_lang$core$Platform_Cmd$map, _moarwick$elm_webpack_starter$WritingAdvice$UpdateHeader, fx)
							]));
				case 'SetQuestions':
					var _p10 = _p3._0;
					var questionsModel$ = function (currentQuestionsModel) {
						return _elm_lang$core$Native_Utils.update(
							currentQuestionsModel,
							{content: _p10});
					};
					var model$ = _elm_lang$core$Native_Utils.update(
						model,
						{
							questions: questionsModel$(model.questions),
							essay: A2(_moarwick$elm_webpack_starter$Essay$init, _p10, '')
						});
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model$,
						_elm_lang$core$Native_List.fromArray(
							[]));
				default:
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						_elm_lang$core$Native_List.fromArray(
							[]));
			}
		}
	});
var _moarwick$elm_webpack_starter$WritingAdvice$view = function (model) {
	var spacerStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'height', '6em')
			]));
	var titleStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'font-size', '3.5em'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'font-family', _moarwick$elm_webpack_starter$Defaults$titleFont),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'padding-top', '0.5em')
			]));
	var essayContainerStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'padding', '5vh 5vw 5vh 5vw'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow', 'hidden'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow-y', 'auto'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow-x', 'auto'),
				A2(
				_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'],
				'background-image',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'url(',
					A2(_elm_lang$core$Basics_ops['++'], _moarwick$elm_webpack_starter$Defaults$imagesLocation, 'paper.png)'))),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], '-webkit-box-shadow', '-3px 0px 20px 0px rgba(50, 50, 50, 0.4)'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], '-moz-box-shadow', '-3px 0px 20px 0px rgba(50, 50, 50, 0.4)'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'box-shadow', '-3px 0px 20px 0px rgba(50, 50, 50, 0.4)')
			]));
	var questionContainerStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'padding', '2vh 5vw 5vh 5vw'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow', 'hidden'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow-y', 'auto'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'overflow-x', 'auto'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'position', 'relative')
			]));
	var mainContainerStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'margin', '0px'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'padding', '0px'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'width', '100vw'),
				A2(_moarwick$elm_webpack_starter$WritingAdvice_ops['=>'], 'height', '100vh')
			]));
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('mdl-grid'),
				mainContainerStyle
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('mdl-cell mdl-cell--6-col'),
						questionContainerStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_moarwick$elm_webpack_starter$WritingAdvice$UpdateHeader,
						_moarwick$elm_webpack_starter$Header$view(model.header)),
						A2(
						_elm_lang$html$Html$h1,
						_elm_lang$core$Native_List.fromArray(
							[titleStyle]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(model.questions.content.title)
							])),
						A2(
						_elm_lang$html$Html_App$map,
						_moarwick$elm_webpack_starter$WritingAdvice$UpdateQuestions,
						_moarwick$elm_webpack_starter$Questions$view(model.questions)),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[spacerStyle]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					])),
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('mdl-cell mdl-cell--6-col'),
						essayContainerStyle
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_moarwick$elm_webpack_starter$WritingAdvice$UpdateHtmlEssay,
						_moarwick$elm_webpack_starter$Essay$view(model.essay))
					]))
			]));
};
