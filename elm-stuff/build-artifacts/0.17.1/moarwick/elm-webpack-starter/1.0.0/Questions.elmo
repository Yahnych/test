var _moarwick$elm_webpack_starter$Questions_ops = _moarwick$elm_webpack_starter$Questions_ops || {};
_moarwick$elm_webpack_starter$Questions_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _moarwick$elm_webpack_starter$Questions$onEnter = F2(
	function (fail, success) {
		var tagger = function (code) {
			return _elm_lang$core$Native_Utils.eq(code, 13) ? success : fail;
		};
		return A2(
			_elm_lang$html$Html_Events$on,
			'keyup',
			A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
	});
var _moarwick$elm_webpack_starter$Questions$init = function () {
	var numberOfParagraphs$ = function () {
		var paragraphIds = A2(
			_elm_lang$core$List$map,
			function (question) {
				return question.paragraphId;
			},
			_moarwick$elm_webpack_starter$Data$questions);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(paragraphIds));
	}();
	var createQuestion = F2(
		function (id$, question) {
			return {question: question.question, answer: '', completed: false, editing: false, id: id$, paragraphId: question.paragraphId, rows: question.rows, maxlength: question.maxlength, format: question.format};
		});
	var content$ = {
		title: _moarwick$elm_webpack_starter$Data$title,
		instructions: _moarwick$elm_webpack_starter$Data$instructions,
		questions: A2(_elm_lang$core$List$indexedMap, createQuestion, _moarwick$elm_webpack_starter$Data$questions),
		numberOfParagraphs: numberOfParagraphs$,
		percentageComplete: 0,
		completionMessage: _moarwick$elm_webpack_starter$Data$completionMessage
	};
	var model$ = {content: content$, mdl: _debois$elm_mdl$Material$model, displayCompletionMessage: false};
	var firstQuestion = A2(
		_elm_lang$core$Maybe$withDefault,
		{question: '', answer: 'This is a test', completed: false, editing: false, id: 0, paragraphId: 0, rows: 0, maxlength: 0, format: _moarwick$elm_webpack_starter$Format$Normal},
		_elm_lang$core$List$head(model$.content.questions));
	var firstAnswer = firstQuestion.answer;
	return model$;
}();
var _moarwick$elm_webpack_starter$Questions$Model = F3(
	function (a, b, c) {
		return {content: a, mdl: b, displayCompletionMessage: c};
	});
var _moarwick$elm_webpack_starter$Questions$Content = F6(
	function (a, b, c, d, e, f) {
		return {title: a, instructions: b, questions: c, numberOfParagraphs: d, percentageComplete: e, completionMessage: f};
	});
var _moarwick$elm_webpack_starter$Questions$Question = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {question: a, answer: b, completed: c, editing: d, id: e, paragraphId: f, rows: g, maxlength: h, format: i};
	});
var _moarwick$elm_webpack_starter$Questions$Sentence = F3(
	function (a, b, c) {
		return {content: a, completed: b, editing: c};
	});
var _moarwick$elm_webpack_starter$Questions$Paragraph = function (a) {
	return {sentences: a};
};
var _moarwick$elm_webpack_starter$Questions$Essay = function (a) {
	return {paragraphs: a};
};
var _moarwick$elm_webpack_starter$Questions$NoOp = {ctor: 'NoOp'};
var _moarwick$elm_webpack_starter$Questions$UpdatePercentageComplete = {ctor: 'UpdatePercentageComplete'};
var _moarwick$elm_webpack_starter$Questions$update = F2(
	function (msg, model) {
		update:
		while (true) {
			var _p0 = msg;
			switch (_p0.ctor) {
				case 'MDL':
					return A2(_debois$elm_mdl$Material$update, _p0._0, model);
				case 'CheckForCompletion':
					var remainingAnswers = A2(
						_elm_lang$core$List$filter,
						function (question) {
							return _elm_lang$core$Basics$not(question.completed);
						},
						model.content.questions);
					var remainingAnswerIDs = A2(
						_elm_lang$core$List$map,
						function (question) {
							return question.id;
						},
						remainingAnswers);
					var remainingQuestionNumbers = A2(
						_elm_lang$core$List$map,
						function (id) {
							return id + 1;
						},
						remainingAnswerIDs);
					var remainingQuestionNumbersAsStrings = A2(
						_elm_lang$core$List$map,
						function (number) {
							return _elm_lang$core$Basics$toString(number);
						},
						remainingQuestionNumbers);
					var percentageComplete = function () {
						var total = _elm_lang$core$Basics$toFloat(
							_elm_lang$core$List$length(model.content.questions));
						var remaining = _elm_lang$core$Basics$toFloat(
							_elm_lang$core$List$length(remainingQuestionNumbers));
						var completed = A2(
							F2(
								function (x, y) {
									return x * y;
								}),
							100,
							total - remaining);
						return _elm_lang$core$Basics$floor(completed / total);
					}();
					var completionMessage$ = A2(
						_elm_lang$core$Basics_ops['++'],
						'Percentage Complete: ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(percentageComplete),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'%',
								A2(
									_elm_lang$core$Basics_ops['++'],
									'. Please complete the remainig questions: ',
									A2(_elm_lang$core$String$join, ', ', remainingQuestionNumbersAsStrings)))));
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{displayCompletionMessage: true}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				case 'UpdateField':
					var _p1 = _p0._1;
					var completed$ = _elm_lang$core$String$isEmpty(_p1) ? false : true;
					var questions$ = function (currentQuestion) {
						return _elm_lang$core$Native_Utils.eq(currentQuestion.id, _p0._0.id) ? _elm_lang$core$Native_Utils.update(
							currentQuestion,
							{answer: _p1, completed: completed$}) : currentQuestion;
					};
					var content$ = function (modelContent) {
						return _elm_lang$core$Native_Utils.update(
							modelContent,
							{
								questions: A2(_elm_lang$core$List$map, questions$, modelContent.questions)
							});
					};
					var model$ = _elm_lang$core$Native_Utils.update(
						model,
						{
							content: content$(model.content),
							displayCompletionMessage: false
						});
					var _v1 = _moarwick$elm_webpack_starter$Questions$UpdatePercentageComplete,
						_v2 = model$;
					msg = _v1;
					model = _v2;
					continue update;
				case 'UpdatePercentageComplete':
					var total = _elm_lang$core$Basics$toFloat(
						_elm_lang$core$List$length(model.content.questions));
					var remainingAnswers = A2(
						_elm_lang$core$List$filter,
						function (question) {
							return _elm_lang$core$Basics$not(question.completed);
						},
						model.content.questions);
					var remainingAnswerIDs = A2(
						_elm_lang$core$List$map,
						function (question) {
							return question.id;
						},
						remainingAnswers);
					var remainingQuestionNumbers = A2(
						_elm_lang$core$List$map,
						function (id) {
							return id + 1;
						},
						remainingAnswerIDs);
					var remaining = _elm_lang$core$Basics$toFloat(
						_elm_lang$core$List$length(remainingQuestionNumbers));
					var completed = A2(
						F2(
							function (x, y) {
								return x * y;
							}),
						100,
						total - remaining);
					var percentageComplete$ = _elm_lang$core$Basics$floor(completed / total);
					var content$ = function (modelContent) {
						return _elm_lang$core$Native_Utils.update(
							modelContent,
							{percentageComplete: percentageComplete$});
					};
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{
								content: content$(model.content)
							}),
						_elm_lang$core$Native_List.fromArray(
							[]));
				default:
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						_elm_lang$core$Native_List.fromArray(
							[]));
			}
		}
	});
var _moarwick$elm_webpack_starter$Questions$CheckForCompletion = {ctor: 'CheckForCompletion'};
var _moarwick$elm_webpack_starter$Questions$MDL = function (a) {
	return {ctor: 'MDL', _0: a};
};
var _moarwick$elm_webpack_starter$Questions$UpdateField = F2(
	function (a, b) {
		return {ctor: 'UpdateField', _0: a, _1: b};
	});
var _moarwick$elm_webpack_starter$Questions$view = function (model) {
	var options = function () {
		var defaultOptions = _evancz$elm_markdown$Markdown$defaultOptions;
		return _elm_lang$core$Native_Utils.update(
			defaultOptions,
			{smartypants: true, sanitize: true});
	}();
	var doneButton = A5(
		_debois$elm_mdl$Material_Button$render,
		_moarwick$elm_webpack_starter$Questions$MDL,
		_elm_lang$core$Native_List.fromArray(
			[0]),
		model.mdl,
		_elm_lang$core$Native_List.fromArray(
			[
				_debois$elm_mdl$Material_Button$ripple,
				_debois$elm_mdl$Material_Button$raised,
				_debois$elm_mdl$Material_Button$colored,
				_debois$elm_mdl$Material_Button$onClick(_moarwick$elm_webpack_starter$Questions$CheckForCompletion),
				A2(_debois$elm_mdl$Material_Options$css, 'background-color', 'rgb(0, 127, 163)'),
				A2(_debois$elm_mdl$Material_Options$css, 'float', 'right'),
				A2(_debois$elm_mdl$Material_Options$css, 'margin-top', '2em')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Done')
			]));
	var answers = function (item) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$p,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(item.id + 1),
								A2(_elm_lang$core$Basics_ops['++'], '. ', item.answer)))
						]))
				]));
	};
	var percentageCompleteMessage = A2(
		_elm_lang$core$Basics_ops['++'],
		'Percentage Complete: ',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(model.content.percentageComplete),
			'%'));
	var completionMessage = function () {
		var remainingAnswers = A2(
			_elm_lang$core$List$filter,
			function (question) {
				return _elm_lang$core$Basics$not(question.completed);
			},
			model.content.questions);
		var remainingAnswerIDs = A2(
			_elm_lang$core$List$map,
			function (question) {
				return question.id;
			},
			remainingAnswers);
		var remainingQuestionNumbers = A2(
			_elm_lang$core$List$map,
			function (id) {
				return id + 1;
			},
			remainingAnswerIDs);
		var remainingQuestionNumbersAsStrings = A2(
			_elm_lang$core$List$map,
			function (number) {
				return _elm_lang$core$Basics$toString(number);
			},
			remainingQuestionNumbers);
		var _p2 = model.displayCompletionMessage;
		if (_p2 === true) {
			return _elm_lang$core$Native_Utils.eq(model.content.percentageComplete, 100) ? model.content.completionMessage : A2(
				_elm_lang$core$Basics_ops['++'],
				'**',
				A2(
					_elm_lang$core$Basics_ops['++'],
					'Please complete the remaining questions: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$String$join, ', ', remainingQuestionNumbersAsStrings),
						'**')));
		} else {
			return '';
		}
	}();
	var checkbox = function (state) {
		return _elm_lang$core$Native_Utils.eq(state, true) ? A2(_elm_lang$core$Basics_ops['++'], _moarwick$elm_webpack_starter$Defaults$imagesLocation, 'checkboxTrue.png') : A2(_elm_lang$core$Basics_ops['++'], _moarwick$elm_webpack_starter$Defaults$imagesLocation, 'checkboxFalse.png');
	};
	var setAutoFocus = function (question) {
		return _elm_lang$core$Native_Utils.eq(question.id, 0) ? true : false;
	};
	var getMaxLength = function (maxlength) {
		return (!_elm_lang$core$Native_Utils.eq(maxlength, 0)) ? maxlength : 500;
	};
	var completionMessageContainerStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'padding-top', '2em')
			]));
	var completionPercentageMessageStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'color', 'mediumSeaGreen'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'font-weight', 'bold'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'width', '80%')
			]));
	var completionMessageStyle = _elm_lang$core$Native_Utils.eq(model.content.percentageComplete, 100) ? _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'color', 'black'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'font-weight', 'normal'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'width', '80%')
			])) : completionPercentageMessageStyle;
	var checkboxStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'margin-left', '-3em'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'margin-top', '-2px')
			]));
	var toggleStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'background-color', 'red'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'display', 'inline'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'height', '0px')
			]));
	var listItemStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'padding-top', '4em')
			]));
	var questionStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'font-size', '1.2em'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'margin-top', '-1.4em'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'padding-bottom', '1.5em')
			]));
	var textfieldStyle = _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'width', '100%'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'font-family', _moarwick$elm_webpack_starter$Defaults$essayFont),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'font-size', '1em'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'line-height', '1.5em'),
				A2(_moarwick$elm_webpack_starter$Questions_ops['=>'], 'padding', '1em')
			]));
	var questions = function (question) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[listItemStyle]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$img,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$src(
							checkbox(question.completed)),
							checkboxStyle
						]),
					_elm_lang$core$Native_List.fromArray(
						[])),
					A2(
					_evancz$elm_markdown$Markdown$toHtml,
					_elm_lang$core$Native_List.fromArray(
						[questionStyle]),
					question.question),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$textarea,
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html_Events$on,
									'input',
									A2(
										_elm_lang$core$Json_Decode$map,
										_moarwick$elm_webpack_starter$Questions$UpdateField(question),
										_elm_lang$html$Html_Events$targetValue)),
									_elm_lang$html$Html_Attributes$class('mdl-textfield__input'),
									_elm_lang$html$Html_Attributes$rows(question.rows),
									textfieldStyle,
									_elm_lang$html$Html_Attributes$maxlength(
									getMaxLength(question.maxlength)),
									_elm_lang$html$Html_Attributes$autofocus(
									setAutoFocus(question))
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(question.answer)
								]))
						]))
				]));
	};
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$ol,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(_elm_lang$core$List$map, questions, model.content.questions)),
				doneButton,
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[completionMessageContainerStyle]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$p,
						_elm_lang$core$Native_List.fromArray(
							[completionPercentageMessageStyle]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(percentageCompleteMessage)
							])),
						A2(
						_evancz$elm_markdown$Markdown$toHtml,
						_elm_lang$core$Native_List.fromArray(
							[completionMessageStyle]),
						completionMessage)
					]))
			]));
};
